Here is a some context to understand the following Coq source file from the mathcomp library:


Reserved Notation Declarations for Arithmetic and Algebraic Structures

Overview
========
This source file defines a comprehensive set of *reserved notations* to standardize the symbolic representation of arithmetic and algebraic operations throughout the formalization of mathematics in Coq, particularly for projects such as the Mathematical Components library. The file does not contain any mathematical definitions or theorems. Instead, its purpose is to preemptively reserve Coq notations for a broad spectrum of mathematical constructs—spanning elementary arithmetic, abstract algebra (including groups, rings, modules, and fields), set theory, linear algebra, and related topics—to ensure syntax consistency, avoid ambiguities, and support extensibility in subsequent development files.

By reserving these notations—without providing their actual interpretation at this stage—the file serves as a common foundation for all later modules that will instantiate these notational forms for specific structures or theories. This architectural choice allows definitions and proofs across the library to use a coordinated, readable mathematical syntax while ensuring that the meanings of symbols can be contextually provided where required.

Mathematical Objects and Their Representations
=============================================

This file systematically reserves notations for operations and concepts that are widely encountered in mathematics, especially in algebra and discrete mathematics. The following are the principal types of objects, along with their typical interpretations (to be defined in context elsewhere):

- **Evaluation Notation (e.[a₁, ..., aₙ])**: Used for applying functions or evaluating objects such as polynomials, formal power series, or tuples at points or indices.

- **Subscript and Superscript Indexing (e`_i, x^-1, x^+n, x^-n)**: 
  - `e`_i : Subscript for selection, often used for list, sequence, or matrix element lookup, or specialized indices (like the pi-part of an integer).
  - x^-1 : Multiplicative inverse, especially in group or field theory.
  - x^+n and x^-n : Positive and negative integer exponents, indicating repeated multiplication or its inverse in group and field structures.

- **(Generalized) Integer Multiplication (x *+ n, x *- n)**: Denotes repeated (possibly signed) addition of `x`, common in abelian structures such as modules or groups.

- **External Product (x *: A, A :* x)**: 
  - Represents scalar multiplication in modules and vector spaces; may also be used for actions like left/right coset multiplication in group theory.

- **Set Operations (A :&: B, A :|: B, a |: B, A :\: B, A :\ b)**: 
  - Intersection, union (and singleton union), relative complement, foundational for set and group theory, subspaces, and other algebraic subsets.

- **Generated Structures (<<A>>, <[a]>)**: 
  - Notation for substructures (subgroups, submodules, subspaces, cyclic structures) generated by a subset or element.

- **Order and Centralizers ([# x], 'C[x], 'C_A[x], 'C(A), 'C_B(A], 'Z(A))**: 
  - Cardinality/order of elements or objects, centralizer and center operations, typically in group, algebra, or linear-algebra contexts.

- **Euclidean Division and Congruence (m %/ d, m %% d, d %| m, m = n %[mod d], etc.)**: 
  - Notations for quotient, remainder, divisibility, and congruence modulo an integer or polynomial—essential for number theory and algebra.

- **Formal Derivative (e^`(n), e^`()):** 
  - Denotes formal derivatives, both simple and of nth order; for polynomials, power series, and potentially group-theoretic derivatives.

- **Absolute Value and Norm (`|x|`)**: 
  - Universal notation for absolute value, norm, or distance over appropriate structures.

- **Conditional and Cast Comparison (x <= y ?= iff C, x <= y :> T, etc.)**: 
  - Comparison operators that can be parameterized by a proof or a typecast, allowing nuanced orderings and equivalences within different numeric or algebraic domains.

- **Recursor Shorthand ([rec a₁, ..., aₙ])**: 
  - Convenient notation for defining or specifying recursive structures or operations, e.g., for primes.

- **Dot Product and Scalar Product ('[u, v], '[u])**: 
  - Specific to linear and inner product spaces, denoting the inner product between vectors or the norm of a vector.

Key Conventions and Coding Patterns
===================================

- **Notation Reservation Only**: No semantics are given; the file simply tells Coq to 'reserve' these syntactic forms so they can be ascribed specific interpretations later. This prevents accidental clashes and allows uniformity across the codebase.

- **Left Association and Infix Levels**: Each reserved notation explicitly specifies associativity and precedence (level) to ensure that complex expressions parse consistently and unambiguously across unrelated modules.

- **Formatting Directives**: Many notations use special `format` annotations for pretty-printing, ensuring rendered formulas align with established mathematical conventions.

- **Extension and Compatibility**: Some notation is set aside for compatibility with historical or alternate versions (e.g., different ways of expressing centralizers or group actions).

- **Scoping**: Notations are declared "globally" reserved, but their actual interpretation (binding to concrete definitions) will typically be introduced in local or type-specific scopes in descendant modules.

Contextual Usage and Docstring Generation Guidance
==================================================

If you are reviewing or documenting code that uses any of these notations, understand that their *meaning* is to be found in the file or module where they are later "declared" (i.e., given a `Notation` or `Infix` binding) for a particular type or structure. This file provides the backbone for that later semantic specification.

The reserved notations are designed to match standard mathematical symbols and are chosen to maximize readability, consistency, and extensibility across formal developments in a wide range of algebraic and arithmetic theories. When encountering chunk-specific code that utilizes these notations, always clarify (or reference) the mathematical structure and context (e.g., "in the module where `x ^+ n` is given meaning for group elements") to avoid ambiguity.

In summary, this file forms the syntactic "vocabulary" for mathematical writing in Coq, covering a vast range of algebraic concepts, but leaves the "grammar" (semantics) to be supplied by each subsequent theory as needed.



Here is a Coq source file from the mathcomp library:

"{source}"

I need you to help me write all the docstring.

To do it, write a json corresponding to a list of all docstring, in the format:

[{{"fullname": "Definition trunc x := if 0 <= x then sval (trunc_subproof x) else 0%N.", "docstring": "The function trunc returns the greatest natural number less than or equal to x when x is at least zero by using the constructive truncation proof; otherwise it returns zero."}}, ....

More precisely, I want you do it for the following:

{missing}

Here are the guidelines to write the docstrings:

Follow these rules when writing “docstring”:

1.  **Natural language only.**  Do not use any mathematical symbols (like <, ≤, =, etc.).  
2.  **Complete sentences.**  Write at least one full sentence; use clear subject-verb-object structure.  
3.  **Explicit**.  Spell out operations and relationships in plain English (e.g. “less than” instead of “<”).  
4.  **Self-contained.**  Anyone reading just the docstring should understand what the lemma does without needing to see Coq syntax or names.  
5.  **Embedding-friendly.**  Avoid pronouns or references that need extra context (e.g. “this” or “it”); mention the inputs and outputs by name or role.  
6.  **Don't cite the name of the premise in the docstring**.

Here is some examples of good docstrings:

"A lemma stating that in a finite field F, the number of invertible elements equals the total number of elements in F minus one, since exactly the zero element is not invertible."
"A notation introducing {{unit R}} to denote the group of invertible elements of a ring R, enabling implicit conversion between units and ring elements as a subtype."
"A lemma stating that multiplication operation on the ring of integers modulo p is commutative."
"A notation denoting the type of integers modulo the maximum of p and two."
"A factory record asserting that a subset of a unital algebra contains zero and one, is closed under subtraction, multiplication, taking inverses of units, and scalar multiplication, thus forming a division-closed subalgebra."

Your final json must be contains in a json code block.
