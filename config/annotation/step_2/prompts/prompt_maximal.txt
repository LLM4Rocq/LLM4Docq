Here is a some context to understand the following Coq source file from the mathcomp library:


Maximal Subgroups, Frattini and Fitting Subgroups, and Special Classes of Finite Groups

Overview and Purpose
====================
This file develops foundational definitions, results, and structural properties about several distinguished classes of subgroups in the theory of finite groups, emphasizing their role in the study of group actions, composition factors, and nilpotency. The file focuses especially on maximal subgroups, (maximal/minimal) normal subgroups, the Frattini and Fitting subgroups, critical subgroups, special and extra-special groups, and the class of self-centralising normal (SCN) abelian subgroups. The ultimate goal is to formalize classical concepts and theorems from finite group theory—such as those related to the solvable radical, coprime action, and the structure of p-groups—enabling machine-checked reasoning in Coq.

Mathematical Objects and Their Formal Representations
=====================================================

1. **Finite Groups and Subgroups**
   - *Type*: `{{group gT}}` or `{{set gT}}` where `gT` is a type carrying a `finGroupType` structure (a MathComp canonical structure for finite groups).
   - *Subgroups*: Subsets of a finite group with group structure; normality and characteristic properties are predicates on those subgroups.

2. **Maximal and Minimal Normal Subgroups**
   - *Maximality*: Subgroup `M` of `G` is maximal if it is a maximal proper subgroup with respect to inclusion.
   - *Minimal normal*: Subgroup `H` is minimal normal in `G` if it is normal and nontrivial, and contains no proper nontrivial normal subgroup.

3. **Frattini Subgroup (`'Phi(G)` or `Frattini G`)**
   - *Definition*: The intersection of all maximal proper subgroups of `G`.
   - *Properties formalized*: Its characteristic and normality, its behavior under morphisms and quotients, and its role in generation properties of `G`.

4. **Fitting Subgroup (`'F(G)` or `Fitting G`)**
   - *Definition*: The largest normal nilpotent subgroup of `G`, formalized as the product of all the p-cores (`'O_p(G)`) over the set of prime divisors of `|G|`.
   - *Properties*: Existence, uniqueness, canonical group structure, functoriality, behavior under isomorphism, and maximality among nilpotent normal subgroups.

5. **Critical Subgroups**
   - *Definition*: Subgroups `A` of `G` satisfying:
     - `A` characteristic in `G`
     - The Frattini subgroup and commutators `[G,A]` are in the center of `A` (`'Z(A)`)
     - The centralizer of `A` in `G` equals the center of `A`
   - *Significance*: Existence of critical subgroups is a cornerstone of the theory of p-groups (cf. the Thompson critical subgroup theorem).

6. **Special and Extra-special Groups**
   - *Special Group*: A p-group whose center, Frattini, and derived subgroup all coincide and are nontrivial but not elementary abelian.
   - *Extra-special Group*: A special p-group whose center has order equal to the prime `p`. These are particularly important as building blocks in the classification of p-groups and their automorphism structures.

7. **Characteristically Simple Groups (`charsimple G`)**
   - *Definition*: A group with no nontrivial characteristic subgroups other than itself, and nontrivial.
   - *Properties*: Connection to simple groups and elementary abelian p-groups.

8. **Self-Centralising Normal Abelian Subgroups (SCN)**
   - *Notation*: `'SCN(G)`
   - *Definition*: The set of normal abelian subgroups `A <| G` of `G` that satisfy `'C_G(A) = A` (they are equal to their own centralizer in `G`).
   - *Variants*: The file also considers subsets `'SCN_n(G)` for groups of rank at least `n`.

Coding and Notational Conventions
==================================

1. **Notation Overloading**
   - Standardized notations are introduced for key concepts, e.g., `'Phi(G)`, `'F(G)`, `'SCN(G)`, and `'SCN_n(G)`, using custom notations designed to fit seamlessly into MathComp's "group_scope" and "Group_scope".
   - These overloaded notations are supported by canonical structures that allow working both at the level of sets and at the level of group structures.

2. **Canonical Structures and Functors**
   - Several objects (e.g., Frattini and Fitting subgroups) are given canonical group structures and functorial properties to facilitate generic rewriting and automated reasoning.
   - Functoriality properties are formalized via canonical `igFun`, `gFun`, and `pgFun` structures (types for functors within the MathComp group functor framework), allowing for composability under isomorphism, morphisms, and images.

3. **Variable Naming and Scoping**
   - Section variables: Throughout, `gT`, `rT` denote ambient group types; `G`, `H`, `K`, `A`, `B`, `D`, etc., are used for subgroups.
   - The file leverages MathComp’s sections and implicit arguments to minimize notational clutter (most group-theoretic set inclusion, normality, etc., are expressed in a succinct, readable manner).

4. **Mathematical Properties via Boolean Predicates**
   - Many definitions and theorems use Boolean reflection (e.g., `maximal`, `normal`, `abelian`, `nilpotent`, `p.-group`, `cyclic`, etc.)—this notational/engineering discipline allows for both Boolean and propositional styles, supporting robust proof automation and readable scripts.
   - Properties such as normality, characteristic property, and various maximal/minimal predicates are generally encoded as Booleans, with reflection lemmas connecting them to logical `Prop` statements.

5. **Sectioning and Theorem Organization**
   - The code is organized into thematic sections, each grouping together related results or concepts:
     - Maximal subgroups and p-groups
     - Frattini theory: structural and functorial properties, quotient behavior, and generating consequences
     - Fitting theory: properties, interactions with p-cores, and behavior in solvable groups
     - Characteristically simple, special, and extraspecial groups
     - SCN subgroups and their critical role in p-groups and in specific theorems
   - Sections often build on each other by nesting group-theoretic context or inheritance.

6. **References to Classical Theorems and Structure Results**
   - The file closely tracks standard results from the literature (notably Aschbacher and Gorenstein), abstracted in a way that supports further machine formalization or application.
   - Theoretical milestones formalized include the Thompson critical subgroup theorem, Aschbacher’s theorems on special/extra-special groups, and properties of the Fitting radical in solvable groups.

Guidance for Readers and Commentators
=====================================
This file is intended as a central infrastructure for anyone who seeks to reason about the internal subgroup structure of finite groups in Coq, especially those working with p-groups, nilpotent groups, or the classification of simple groups. Notational conventions and section variables are uniform throughout. To interpret or comment on a specific code chunk, it suffices to know (from this docstring):

- How key objects (Frattini and Fitting subgroups, special/extra-special groups, SCN subgroups) are defined and constructed
- Which mathematical properties (maximality, minimality, characteristic, nilpotency, etc.) are used and how they are encoded
- That functoriality and canonical structures abound, supporting broad modularity in lemma statements
- That major theorems formalize classical results in the structure theory of finite groups, often under explicit hypotheses about p-groups, nilpotence, or solvability.

No prior knowledge of the source code or even the MathComp library internals is required, provided the reader has a grounding in the basics of finite group theory and in the general methodology of Coq/SSReflect formalization.



Here is a Coq source file from the mathcomp library:

"{source}"

I need you to help me write all the docstring.

To do it, write a json corresponding to a list of all docstring, in the format:

[{{"fullname": "Definition trunc x := if 0 <= x then sval (trunc_subproof x) else 0%N.", "docstring": "The function trunc returns the greatest natural number less than or equal to x when x is at least zero by using the constructive truncation proof; otherwise it returns zero."}}, ....

More precisely, I want you do it for the following:

{missing}

Here are the guidelines to write the docstrings:

Follow these rules when writing “docstring”:

1.  **Natural language only.**  Do not use any mathematical symbols (like <, ≤, =, etc.).  
2.  **Complete sentences.**  Write at least one full sentence; use clear subject-verb-object structure.  
3.  **Explicit**.  Spell out operations and relationships in plain English (e.g. “less than” instead of “<”).  
4.  **Self-contained.**  Anyone reading just the docstring should understand what the lemma does without needing to see Coq syntax or names.  
5.  **Embedding-friendly.**  Avoid pronouns or references that need extra context (e.g. “this” or “it”); mention the inputs and outputs by name or role.  
6.  **Don't cite the name of the premise in the docstring**.

Here is some examples of good docstrings:

"A lemma stating that in a finite field F, the number of invertible elements equals the total number of elements in F minus one, since exactly the zero element is not invertible."
"A notation introducing {{unit R}} to denote the group of invertible elements of a ring R, enabling implicit conversion between units and ring elements as a subtype."
"A lemma stating that multiplication operation on the ring of integers modulo p is commutative."
"A notation denoting the type of integers modulo the maximum of p and two."
"A factory record asserting that a subset of a unital algebra contains zero and one, is closed under subtraction, multiplication, taking inverses of units, and scalar multiplication, thus forming a division-closed subalgebra."

Your final json must be contains in a json code block.
