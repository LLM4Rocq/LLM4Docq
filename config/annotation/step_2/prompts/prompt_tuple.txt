Here is a some context to understand the following Coq source file from the mathcomp library:


Tuples and Bounded Sequences in MathComp

Overview
========
This file formalizes two closely related mathematical structures in the Coq proof assistant: **tuples** (sequences with fixed, statically known length) and **bounded sequences** (sequences with length bounded by a specified constant). These provide types and operations for manipulating small, indexable arrays and variable-length buffers with static size constraints, serving as foundational combinatorial objects for formalized mathematics and computer science proofs.

The development supports a wide spectrum of operations (construction, mapping, concatenation, indexing, etc.) on these objects, offering both strong static guarantees and practical notations. The file also establishes how tuples and bounded sequences inherit canonical mathematical structures such as equality, choice, countability, and finiteness, reflecting the rich algebraic ecosystem of the Mathematical Components (MathComp) library. All constructs are presented in a self-contained way designed for reuse in proofs and developments beyond the MathComp library itself.

Mathematical Objects and Representations
=======================================

1. **Tuples (`n.-tuple T`)**
   - **Definition:** A tuple is a sequence (`seq T`) of elements of a type `T` with fixed length `n`, where `n` is a compile-time natural number.
     - **Coq Representation:** Defined as a subset type (subType) `tuple_of n T`, implemented as `{{tval : seq T | size tval == n}}`.
   - **Construction and Notation:**
     - `[tuple x1; ...; xn]`: Explicit tuple constructor for elements `x1`, ..., `xn`.
     - `[tuple of s]`: Builds a tuple from a sequence `s : seq T`, requiring proof that `size s = n`.
     - `in_tuple s`: Constructs an (size s)-tuple from a sequence `s`.
     - `tcast Emn t`: Casts an `m.-tuple` to an `n.-tuple` via a proof `Emn: m = n`.
   - **Indexing and Components:**
     - `tnth t i`: Retrieves the `i`th component of tuple `t` where `i : 'I_n` (ordinal index).
     - `[tnth t i]`: Alternative notation allowing `i : nat` with runtime boundedness check.
     - `thead t`: Returns the first element of a non-empty tuple.
     - All underlying sequence operations (like `size`, `nth`, etc.) are available via coercion, with `tsize t` returning the tuple length.
   - **Specialized Tuples:**
     - `tuple0` gives the unique empty tuple.
     - `ord_tuple n`: The canonical tuple `[0; 1; ...; n-1]` of ordinals of length `n`.
     - `[tuple F | i < n]`: Constructs a tuple by giving the `i`th element as an expression `F` indexed by `i`.
   - **Functoriality:** Mapping and combinations preserve the tuple structure, with canonical instances for `map`, concatenation, sorting, etc.

2. **Bounded Sequences (`n.-bseq T`)**
   - **Definition:** A bounded sequence is a sequence over type `T` whose length is _at most_ `n`.
     - **Coq Representation:** Defined as a subset type (subType) `bseq_of n T := {{bseqval : seq T | size bseqval <= n}}`.
   - **Construction and Notation:**
     - `[bseq x1; ...; xn]`: Explicit bounded sequence with items `x1`, ..., `xn`.
     - `[bseq of s]`: Bounded sequence from a sequence `s`, requiring `size s <= n`.
     - `in_bseq s`: Constructs a (size s).-bounded sequence from `s`.
     - `insub_bseq n s`: Safe coercion from any sequence `s` to a `n.-bseq T`, yielding empty if too large.
     - `cast_bseq`, `widen_bseq`: (Coercions) for changing bound via proven equalities/inequalities.
   - **Interconversion and Structure:** All `n.-tuple T` are (canonically) `n.-bseq T` via coercion.
   - **Operations:** Like tuples, bounded sequences can be mapped, concatenated, reversed, etc., while maintaining the bound.
   - **Tagged Tuples:** There are bijections between bounded sequences and tagged tuples, capturing variable-size tuples indexed by their length.

3. **Common Foundations and Typeclass Infrastructure**
   - Both structures are **subTypes** of `seq`, inheriting not only data but also standard structures (boolean equality, choice, countability, finiteness) for use in algebraic and combinatorial contexts.
   - For types with finiteness structure (`finType`), the file constructs a proper enumeration (`enum`) yielding all possible tuples or bounded sequences of that type.
   - The file detects and provides canonical predicates (`predType`) and reflection lemmas for set membership, equality, and unique representation.

Key Conventions and Notational Choices
======================================

- **Type and Notation Names:**
  - `n.-tuple T` and `n.-bseq T` are the principal types, always indicating static or maximal length over elements of type `T`.
  - Constructors like `[tuple ...]`, `[tuple of s]`, `[bseq ...]`, and `[bseq of s]` enable ergonomic and readable construction, ensuring compatibility with Coq's notation system.
  - Indexing is performed via ordinals (`'I_n`), which allows total, safe, and typed access to any tuple component.
  - Function names are typically suffixed according to what they operate on (e.g., `tnth` for tuples, `bseqval` for bounded sequences).

- **Canonicals and Structural Inheritance:**
  - Canonical structures (instances) are defined so that tuples and bounded sequences transparently inherit operations, combinatorial structures, and reasoning infrastructure (e.g., equality and finiteness via MathComp’s HB (Hierarchy Builder) system).
  - Most operations from sequences (`seq`)—such as `map`, `cat`, `rcons`, `sort`—are lifted (via canonical instances) to work with tuples and bounded sequences, provided the length or bound constraints are satisfied.

- **Coercion Patterns:**
  - Tuples and bounded sequences include coercions to their underlying sequence types, but their interface ensures that proofs (such as equalities and bounds) are preserved.
  - Bounded sequences are upwardly coercible (`widen_bseq`) and can be recast to smaller or larger bounds when justified.

- **Proof and Elimination Principles:**
  - Custom induction and pattern-matching (elimination) tools, like `tupleP` or `tuple_eta`, are included to support structural reasoning, often relating tuples to their head/tail decomposition.

- **Quantification and Reflection:**
  - Boolean quantifiers (e.g., `all a t`, `has a t`) have equivalents for quantifying over tuple elements via `tnth`, accompanied by reflection lemmas (`all_tnthP`, `has_tnthP`, etc.).

- **Bijection with Tagged Tuples:**
  - The file features construction of bijections between bounded sequences and "tagged tuples" (i.e., pairs of a length and a tuple of that length), supporting inductive proofs and recursive definitions where length is part of the data.

- **Typeclass Arguments and Scoping:**
  - The file consistently uses section and variable management to parameterize theory over types and sizes, making all utilities compatible with MathComp's `form_scope` and `type_scope`, as well as with the broader typeclass landscape.
  - Arguments' implicitness is controlled for readability and smooth type inference.

- **Efficiency and Practicality:**
  - Internally, the representations are efficient (no nested records), and many operations avoid unnecessary default values or runtime checks due to strong static guarantees.
  - By leveraging canonical instances and HB (Hierarchy Builder), automation is maximized for both writing and proving.

Summary
=======
This file lays a rigorous, extensible, and practical foundation for working with finite arrays (tuples) and size-bounded buffers (bounded sequences) in Coq developments. Its design blends mathematical clarity (clear type-level length information and index safety), combinatorial expressiveness (enumerations, set-like operations), and effective code engineering (static checks, rich canonical structure, and familiar notation). The result is a set of tools suitable for both low-level data manipulation and high-level mathematical formalization, usable throughout the MathComp library and compatible extensions.



Here is a Coq source file from the mathcomp library:

"{source}"

I need you to help me write all the docstring.

To do it, write a json corresponding to a list of all docstring, in the format:

[{{"fullname": "Definition trunc x := if 0 <= x then sval (trunc_subproof x) else 0%N.", "docstring": "The function trunc returns the greatest natural number less than or equal to x when x is at least zero by using the constructive truncation proof; otherwise it returns zero."}}, ....

More precisely, I want you do it for the following:

{missing}

Here are the guidelines to write the docstrings:

Follow these rules when writing “docstring”:

1.  **Natural language only.**  Do not use any mathematical symbols (like <, ≤, =, etc.).  
2.  **Complete sentences.**  Write at least one full sentence; use clear subject-verb-object structure.  
3.  **Explicit**.  Spell out operations and relationships in plain English (e.g. “less than” instead of “<”).  
4.  **Self-contained.**  Anyone reading just the docstring should understand what the lemma does without needing to see Coq syntax or names.  
5.  **Embedding-friendly.**  Avoid pronouns or references that need extra context (e.g. “this” or “it”); mention the inputs and outputs by name or role.  
6.  **Don't cite the name of the premise in the docstring**.

Here is some examples of good docstrings:

"A lemma stating that in a finite field F, the number of invertible elements equals the total number of elements in F minus one, since exactly the zero element is not invertible."
"A notation introducing {{unit R}} to denote the group of invertible elements of a ring R, enabling implicit conversion between units and ring elements as a subtype."
"A lemma stating that multiplication operation on the ring of integers modulo p is commutative."
"A notation denoting the type of integers modulo the maximum of p and two."
"A factory record asserting that a subset of a unital algebra contains zero and one, is closed under subtraction, multiplication, taking inverses of units, and scalar multiplication, thus forming a division-closed subalgebra."

Your final json must be contains in a json code block.
