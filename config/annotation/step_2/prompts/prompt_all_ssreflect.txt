Here is a some context to understand the following Coq source file from the mathcomp library:


Order Theory Foundations in MathComp

Overview
========
This file serves as a central entry point to the Mathematical Components (MathComp) library’s formalization of order-theoretic structures. Its primary goal is to aggregate and publicly re-export foundational modules pertaining to preorders, partial orders, and related order structures, thereby providing a uniform interface for users and downstream developments. The file acts as an abstraction layer for order theory in MathComp, harmonizing access to both basic and advanced definitions, infrastructure, and canonical instances related to ordered sets.

Mathematical Objects and Their Coq Representations
==================================================
The core mathematical structures addressed in this file are:

1. **Preorders**:
   - *Definition*: A preorder is a set equipped with a reflexive and transitive binary relation.
   - *Coq Representation*: The typeclass for preorders provides a type `T` along with a relation `le : T -> T -> Prop`, and proofs of reflexivity and transitivity properties.
   - *Located in*: The `preorder` module (re-exported here).

2. **Partial Orders (Posets)**:
   - *Definition*: A partial order is a preorder in which the relation is also antisymmetric (i.e., `le x y` and `le y x` implies `x = y`).
   - *Coq Representation*: As a typeclass extending preorders, supporting the needed properties; key operations and lemmas characterize the behavior of the order.
   - *Located in*: The `order` module.

3. **Orders (Total, Lattice, etc.)**:
   - *Definition*: Includes total orders (where all pairs are comparable), as well as richer structures like lattices, depending on downstream modules.
   - *Coq Representation*: Different typeclasses and canonical instance mechanisms capture these variants; specific structures make use of MathComp’s packed class system for extensibility and inference.

   The booter module (`all_boot`) is also exported and is critical for setting up the infrastructure needed for canonical structures and typeclass inference throughout MathComp, especially for algebraic and order-theoretic hierarchies.

Key Conventions and Notational Practices
========================================
1. **Module Re-exports**: This file collects and re-exports (`Export`) the full contents of the `all_boot`, `preorder`, and `order` modules. This means that importing this file provides direct access to all canonical definitions, notations, and instances declared in those modules, without redundant imports elsewhere.

2. **Canonical Structures and Typeclasses**: Order-theoretic notions—such as preorder and partial order—are governed by canonical structures rather than plain records or typeclasses. This allows MathComp to automate instance inference and to maintain mathematical interface uniformity. As such, order relations and their properties can be referred to canonically for any compatible type.

3. **Notational Uniformity**: Logical and relational operators for orderings (such as `<=`, `<`, `==`, and related symbols) are made available through the imported modules. Lemmas and notations for reasoning about ordered types adhere to MathComp’s conventions, such as Boolean reflection (`reflect`) for connecting logical propositions and Boolean predicates.

4. **Deprecation Policy**: The file is marked as deprecated (since MathComp 2.5.0), with guidance to use more granular imports (`all_boot` and `all_order`) directly in new developments. However, the file remains to support backward compatibility and smooth migration for existing codebases.

Context for Retrieval and Commentary
===================================
This file is intended to provide a comprehensive context for formal developments that work with order-theoretic abstractions in MathComp. By importing it, a user or downstream module gains the infrastructure, notation, and lemmas to work with preorders, partial orders, and (where appropriate) richer order structures without manual import of each building block.

In terms of code commentary or docstrings for code chunks originating from this file, the function, definition, or lemma in question will relate to one of the re-exported foundational structures (preorder, order, and the associated infrastructure and notations). New mathematical constructs will likely rely on the canonical structure and inference infrastructure laid out here, and reasoning will likely use the notational and proof ecosystem provided by these modules.

This docstring is self-contained and should suffice for anyone wishing to interpret the intent of code, definitions, lemmas, or imports stemming from this module.



Here is a Coq source file from the mathcomp library:

"{source}"

I need you to help me write all the docstring.

To do it, write a json corresponding to a list of all docstring, in the format:

[{{"fullname": "Definition trunc x := if 0 <= x then sval (trunc_subproof x) else 0%N.", "docstring": "The function trunc returns the greatest natural number less than or equal to x when x is at least zero by using the constructive truncation proof; otherwise it returns zero."}}, ....

More precisely, I want you do it for the following:

{missing}

Here are the guidelines to write the docstrings:

Follow these rules when writing “docstring”:

1.  **Natural language only.**  Do not use any mathematical symbols (like <, ≤, =, etc.).  
2.  **Complete sentences.**  Write at least one full sentence; use clear subject-verb-object structure.  
3.  **Explicit**.  Spell out operations and relationships in plain English (e.g. “less than” instead of “<”).  
4.  **Self-contained.**  Anyone reading just the docstring should understand what the lemma does without needing to see Coq syntax or names.  
5.  **Embedding-friendly.**  Avoid pronouns or references that need extra context (e.g. “this” or “it”); mention the inputs and outputs by name or role.  
6.  **Don't cite the name of the premise in the docstring**.

Here is some examples of good docstrings:

"A lemma stating that in a finite field F, the number of invertible elements equals the total number of elements in F minus one, since exactly the zero element is not invertible."
"A notation introducing {{unit R}} to denote the group of invertible elements of a ring R, enabling implicit conversion between units and ring elements as a subtype."
"A lemma stating that multiplication operation on the ring of integers modulo p is commutative."
"A notation denoting the type of integers modulo the maximum of p and two."
"A factory record asserting that a subset of a unital algebra contains zero and one, is closed under subtraction, multiplication, taking inverses of units, and scalar multiplication, thus forming a division-closed subalgebra."

Your final json must be contains in a json code block.
