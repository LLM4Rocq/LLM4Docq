Here is a some context to understand the following Coq source file from the mathcomp library:


Separable and Inseparable Field Extensions

Overview
========
This Coq file develops a comprehensive, formal theory of separable and inseparable field extensions. Its main goal is to precisely characterize when elements and subfields of a field extension are separable or purely inseparable over a base field, and to formalize the fundamental algebraic results that structure such extensions.

The development is set within the Mathematical Components (MathComp) ecosystem, leveraging its robust formalizations of fields, polynomials, vector spaces, and linear algebra. This enables treatment of field extensions, derivations, and minimal polynomials in a modular and rigorous way.

The file covers both general theory (valid in arbitrary characteristic) and specialized results distinguishing the behavior in characteristic zero and in positive characteristic (including various phenomena unique to the latter, such as inseparability). Major theorems formalized in the file include the characterization of separable polynomials, the structure of separable and purely inseparable elements and subfields, the construction and extension of derivations, and several forms of the (Primitive) Element Theorem in the separable setting.

Mathematical Structures and Concepts
====================================
The key algebraic structures and notions formalized in this file include:

1. **Polynomial Separability**:
   - *Separable polynomials* are polynomials without multiple roots in any field extension. Formally, `separable_poly p` holds if and only if the polynomial `p` is coprime to its formal derivative `p^'()`.
   - *Square-free polynomials* are characterized, and their relation to separability is established.

2. **Minimal Polynomials and Separable Elements**:
   - The *minimal polynomial* of an element `x` over a subfield `K` is used to define when `x` is *separable* over `K`. The predicate `separable_element K x` holds when the minimal polynomial of `x` over `K` is separable.

3. **Separable and Purely Inseparable Extensions**:
   - A *separable extension* is one in which every element is separable over the base field: `separable K E` checks if all elements of the subspace `E` are separable over `K`.
   - An element is *purely inseparable* if, for some power-of-p (where p is the characteristic) exponent `n`, its nth power lies in the base field. The predicate `purely_inseparable_element K x` expresses this.
   - These concepts are extended to subfields (or subspaces) via `purely_inseparable K E`.

4. **Derivations and Their Extensions**:
   - *Derivations* generalize the notion of differentiation to abstract field extensions: a (linear) operator `D` is a derivation over a subfield `K` if it satisfies the Leibniz rule on a basis of `K`.
   - The file constructs and characterizes extensions of derivations from a base field to its simple extensions by a separable element.

5. **The Primitive Element Theorem (PET)**:
   - Several versions of PET are formalized. In particular, the *strong* and *infinite* PETs assert that under suitable (usually separability) conditions, finite extensions generated by two elements can be generated by a single element. Both finite and infinite cases are handled, with separability playing a key role.

6. **Decomposition, Generators, and Maximality**:
   - Every finite extension admits a *separable generator*: `separable_generator K E` selects an element that not only generates a maximal separable subextension but is also used to analyze the structure of the extension as a combination of separable and purely inseparable parts.

Mathematical Representations in Coq
====================================
All concepts above are encoded in terms of MathComp’s dependent types:

- *Fields* are of type `fieldType` or as substructures like `{{subfield L}}` for a subfield of a field `L`.
- *Polynomials* over a ring `R` are `{{poly R}}`; the derivative of a polynomial is `p^'()`.
- *Vector spaces* and *subspaces*: `{{vspace L}}` denotes subspaces, and their elements underlie the formal extension structures.
- *Linear and additive maps* are elements of `'End(L)`, the set of endomorphisms (linear self-maps) of `L`.
- *Derivations* and their properties are captured by predicates like `Derivation K D`, often restricted to linear maps for simplicity.
- *Separable and inseparable properties* are Boolean-valued predicates, enabling fine-grained proof automation. Many key classification results are packaged as `reflect` lemmas, connecting Boolean expressions to propositional properties.
- *Characteristic* of a field is accessed via `[pchar L]`, and characteristic-dependent arguments use predicates like `[pchar L].-nat n` to describe exponents relevant to inseparability.

Key Conventions and Notations
==============================
1. **Boolean Reflection and Notation**: Core algebraic predicates such as `separable_poly`, `separable_element`, `separable`, `purely_inseparable_element`, and `purely_inseparable` are Boolean functions, allowing the use of MathComp’s small-scale reflection method to bridge between computational and propositional reasoning. For example, reflection lemmas like `separable_polyP`, `separable_elementP`, and so on, connect Booleans to existential and universal mathematical properties.

2. **Scoping and Import**: The file makes use of MathComp’s `ring_scope` for algebraic notations and imports the appropriate structures and theory from MathComp libraries (e.g., `GRing.Theory`). Variables are often pinned to implicit arguments and local notation is employed to avoid verbose type signatures.

3. **Extension by Adjoining**: The adjunction of an element `x` to a field (or subfield) `K` is denoted `<<K; x>>%VS` (the vector space generated over `K` by `x`), or more generally by `<<K; rs>>` for a sequence `rs`. This supports the construction and analysis of simple and finite extensions.

4. **Handling Multiple Characteristics**: The theory carefully distinguishes between characteristic zero fields and positive characteristic, especially in recognizing and constructing purely inseparable elements and subextensions.

5. **Derivations as Linear Operators**: While derivations could be more generally defined, the file develops the theory primarily for linear endomorphisms, simplifying some technical details while remaining sufficient for the main algebraic applications.

6. **Deprecation/Wrappers**: Several notations are marked as deprecated in favor of more systematic naming conventions (e.g., `pchar0_PET` instead of `char0_PET`), but wrappers are provided for backward compatibility.

Contextual Usage and Guidance
==============================
This file functions both as an axiomatization and as a computational toolkit for handling separability questions in abstract and concrete field extensions within formalized mathematics and computer-assisted proofs. Its design relies on a modular, layered approach: primitive definitions are paired with elementary lemmas and then systematized into higher-level theorems about the structure of field extensions, including their decomposition and generation.

When interpreting or documenting individual code chunks from the file, it is crucial to recognize:
- How properties like separability and inseparability are expressed equivalently via polynomials, derivations, or field-theoretic constructs;
- That many results are proven in a "reflected" style connecting Boolean predicates and classical mathematical statements;
- That sectioning patterns, implicit arguments, and local notation tie proofs and definitions closely to the algebraic context being considered.

Summary
=======
In summary, this file forms a foundational module for the formal theory of field extensions, focusing on the critical dichotomy of separability and inseparability, which underpins much of modern Galois theory and algebraic geometry. It provides tools for the identification, construction, classification, and decomposition of extensions, supporting both theoretical developments and practical formalizations in advanced algebra.



Here is a Coq source file from the mathcomp library:

"{source}"

I need you to help me write all the docstring.

To do it, write a json corresponding to a list of all docstring, in the format:

[{{"fullname": "Definition trunc x := if 0 <= x then sval (trunc_subproof x) else 0%N.", "docstring": "The function trunc returns the greatest natural number less than or equal to x when x is at least zero by using the constructive truncation proof; otherwise it returns zero."}}, ....

More precisely, I want you do it for the following:

{missing}

Here are the guidelines to write the docstrings:

Follow these rules when writing “docstring”:

1.  **Natural language only.**  Do not use any mathematical symbols (like <, ≤, =, etc.).  
2.  **Complete sentences.**  Write at least one full sentence; use clear subject-verb-object structure.  
3.  **Explicit**.  Spell out operations and relationships in plain English (e.g. “less than” instead of “<”).  
4.  **Self-contained.**  Anyone reading just the docstring should understand what the lemma does without needing to see Coq syntax or names.  
5.  **Embedding-friendly.**  Avoid pronouns or references that need extra context (e.g. “this” or “it”); mention the inputs and outputs by name or role.  
6.  **Don't cite the name of the premise in the docstring**.

Here is some examples of good docstrings:

"A lemma stating that in a finite field F, the number of invertible elements equals the total number of elements in F minus one, since exactly the zero element is not invertible."
"A notation introducing {{unit R}} to denote the group of invertible elements of a ring R, enabling implicit conversion between units and ring elements as a subtype."
"A lemma stating that multiplication operation on the ring of integers modulo p is commutative."
"A notation denoting the type of integers modulo the maximum of p and two."
"A factory record asserting that a subset of a unital algebra contains zero and one, is closed under subtraction, multiplication, taking inverses of units, and scalar multiplication, thus forming a division-closed subalgebra."

Your final json must be contains in a json code block.
