Here is a some context to understand the following Coq source file from the mathcomp library:


(* Auxiliary Lemmas and Structural Properties for Homomorphisms, Conditionals, and Relations *)

Overview and Purpose
====================
This file provides several foundational lemmas that support formal developments in mathematics using the Coq proof assistant, particularly within the ecosystem of the Mathematical Components (MathComp) library. The primary aim is to supply generic properties and rewrites for (1) monotonicity and homomorphism relations between functions, (2) behavior of conditional expressions involving Boolean operators, and (3) transitivity of relational preimages. These tools serve as modular building blocks, easing reasoning about more complex mathematical structures by reducing proofs to these core properties.

Mathematical Objects and Their Representation
=============================================
1. **Predicates and Relations on Types**
    - *Predicates (`pred T`)*: In Coq, a predicate over a type `T` is simply a function `T -> bool` or sometimes `T -> Prop`, indicating whether a property holds on an element.
    - *Relations (`rel T`)*: A binary relation on `T` is given by `rel T` (i.e., `T -> T -> bool`), supporting definitions such as orderings or equivalence relations.

2. **Functions, Homomorphisms, and Monotonicity**
    - *Functions (`f : aT -> rT`)*: Generic mappings between types.
    - *Homomorphism Notation (`{{homo f : x / aP x >-> rP x}}`)*: This notation (from MathComp) expresses that function `f` maps elements from the predicate `aP` on `aT` into those satisfying predicate `rP` on `rT`, in a way compatible with a specified algebraic structure or operation.
    - *Monotonicity Notation (`{{mono f : x / P x >-> Q x}}`)*: Denotes that `f` is monotonic for elements matching predicate `P`, preserving relation `Q`.
    - *Cancel Functions (`cancel g f`)*: Expresses that `g` is a (left or right) inverse of `f`, i.e., for all `x`, `g (f x) = x`.

3. **Boolean Combinators and Conditionals**
    - *Booleans (`bool`)*: Two-valued type with elements `true` or `false`. Boolean operators like conjunction (`&&`), disjunction (`||`), implication (`==>`), and exclusive or (`(+)`) are central.
    - *Conditional Expressions (`if b then x else y`)*: Standard if-then-else over Booleans, branched over variables or expressions of any type `T`.
    - The file provides lemmas rewriting composite conditionals using Boolean operators into iterated or nested conditionals, which is crucial for normalization and proof automation.

4. **Relational Preimages and Transitivity**
    - *Relational Preimage (`relpre f leT`)*: Given a relation `leT : rel T` and a function `f : T' -> T`, the preimage relation relates `x` and `y` in `T'` if their images under `f` are related by `leT` in `T`.
    - *Transitivity (`transitive R`)*: A relation `R` is transitive if whenever `R x y` and `R y z`, then `R x z`.

Key Notational and Coding Conventions
=====================================
1. **Implicit Arguments**
    - *Set Implicit Arguments*: Most type and function parameters are inferred automatically; users of the file need not provide them explicitly for lemmas if types can be determined from context.
    - *Unset Strict Implicit*: More flexibility is permitted in implicit argument inference.
    - *Unset Printing Implicit Defensive*: Simplifies notation when viewing terms and proofs.

2. **Notational Forms**
    - *Curly-brace Syntax for Homomorphisms/Monotonicity*: `{{homo ...}}` and `{{mono ...}}` are idiomatic to MathComp and abstract away the precise details of algebraic or order structure, focusing only on the behaviors relevant to the lemma.
    - *Boolean Connectives*: Notations such as `&&`, `||`, `==>`, and `(+)]` denote standard conjunction, disjunction, implication, and exclusive-or.
    - *Short-Form Lemma Names*: Lemmas such as `if_and`, `if_or`, `if_implyb`, etc., communicate concisely the main rewrite operation on conditionals they express.

3. **Type Universality**
    - Lemmas are made as generic as possible by quantifying over arbitrary types (`Type`) and predicates, so they can be instantiated in various mathematical contexts (groups, orders, etc.) without additional translation.

4. **Proof-Relevance**
    - Most lemmas are intended for direct use in proof scripts, typically as rewrites or hypotheses, and often facilitate reasoning about more complex symbolic expressions by breaking them down into primitive, predictable rewrites.

5. **File Organization and Modularization**
    - This file is intended as an auxiliary or core library layer, exporting its critical Boolean and relational primitives (`Require Export ssrbool`) for consumption by higher-level developments.

Context of Use
==============
The constructs defined in this file are foundational and intended to be imported wherever one needs:
  - To show that the inverses of homomorphisms or monotone functions inherit monotonicity when certain cancellation and mapping properties are present.
  - To normalize nested or compound Boolean conditional statements into canonical iterated forms, thereby enabling streamlined proof steps and automation.
  - To transfer transitivity properties through relational preimages—important in situations such as order or metric structure being lifted along functions.

Overall, users and automated tools who only read this docstring should infer that the file is not about a particular mathematical theory, but rather provides general-purpose facts and rewrites about functions, Booleans, and relations—tools that are essential in structuring, simplifying, and automating proofs elsewhere in a formalized mathematical library.




Here is a Coq source file from the mathcomp library:

"{source}"

I need you to help me write all the docstring.

To do it, write a json corresponding to a list of all docstring, in the format:

[{{"fullname": "Definition trunc x := if 0 <= x then sval (trunc_subproof x) else 0%N.", "docstring": "The function trunc returns the greatest natural number less than or equal to x when x is at least zero by using the constructive truncation proof; otherwise it returns zero."}}, ....

More precisely, I want you do it for the following:

{missing}

Here are the guidelines to write the docstrings:

Follow these rules when writing “docstring”:

1.  **Natural language only.**  Do not use any mathematical symbols (like <, ≤, =, etc.).  
2.  **Complete sentences.**  Write at least one full sentence; use clear subject-verb-object structure.  
3.  **Explicit**.  Spell out operations and relationships in plain English (e.g. “less than” instead of “<”).  
4.  **Self-contained.**  Anyone reading just the docstring should understand what the lemma does without needing to see Coq syntax or names.  
5.  **Embedding-friendly.**  Avoid pronouns or references that need extra context (e.g. “this” or “it”); mention the inputs and outputs by name or role.  
6.  **Don't cite the name of the premise in the docstring**.

Here is some examples of good docstrings:

"A lemma stating that in a finite field F, the number of invertible elements equals the total number of elements in F minus one, since exactly the zero element is not invertible."
"A notation introducing {{unit R}} to denote the group of invertible elements of a ring R, enabling implicit conversion between units and ring elements as a subtype."
"A lemma stating that multiplication operation on the ring of integers modulo p is commutative."
"A notation denoting the type of integers modulo the maximum of p and two."
"A factory record asserting that a subset of a unital algebra contains zero and one, is closed under subtraction, multiplication, taking inverses of units, and scalar multiplication, thus forming a division-closed subalgebra."

Your final json must be contains in a json code block.
