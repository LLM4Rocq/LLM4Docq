Here is a some context to understand the following Coq source file from the mathcomp library:


Frobenius Groups

Overview
========
This file formalizes the theory of Frobenius groups in the Coq proof assistant, using the Mathematical Components (MathComp) library's group theory infrastructure. It defines the core concepts associated with Frobenius groups—subgroup actions, semidirect products, transitivity and regularity conditions, and testable predicates for group-theoretic properties. In addition to formal definitions, the file provides a set of basic results about Frobenius groups and a version of the classical Frobenius theorem concerning solution counts to certain group equations.

Purpose and Main Goals
======================
The main objective of this file is to capture and mechanize the algebraic structure and the defining properties of Frobenius groups and related notions. Key goals include:

- Providing effective (computable) and propositional definitions of Frobenius groups, their kernels, and their complements.
- Characterizing semiregular and "prime" actions of groups on subgroups.
- Bridging the classical action-theoretic definition of Frobenius groups (as permutation groups with regularity properties) and the structural definition (as a semidirect product of a kernel and a complement).
- Establishing lemmas that relate properties of subgroups in the Frobenius context (such as Hall subgroups, coprimality of orders, and normalizers).
- Introducing notation and effective predicates to reason conveniently about Frobenius group structure in later developments.

Mathematical Objects and Their Representation
=============================================

1. **Finite Groups and Subgroups**
   - All groups are assumed finite and are represented as `{{group gT}}` where `gT` is a finite group type (`finGroupType` in MathComp).
   - Subsets and subgroups are implemented as elements of `{{set gT}}` or `{{group gT}}`.

2. **Semidirect Product (`K ><| H`)**
   - An explicit Coq operation, used to describe groups whose underlying set is formed as a semidirect product of subgroups `K` and `H`.

3. **Actions and Orbits**
   - Group actions are given by elements of `{{action gT &-> sT}}`, where `gT` acts on a finite type `sT`.
   - Stabilizers, orbits, fixed point sets, and centralizers are fundamentally important and are written with notation such as `'C_K[x]` (the centralizer in `K` of `x`) or `'Fix_(S | to)[x]` (the set of points in `S` fixed by `x` under action `to`).

4. **Frobenius Groups**
   - Defined both structurally and via actions:
     - Structurally: A group `G` is a Frobenius group with kernel `K` and complement `H` if `G = K ><| H`, and `H` acts on `K` in a certain "semiregular" or "prime" manner.
     - Action-theoretically: `G` acting faithfully and transitively on a set, so that no nontrivial element fixes more than one point and `H` is the stabilizer of a point.
   - Several effective predicates capture different instantiations, such as `[Frobenius G = K ><| H]` (structure with kernel and complement), `[Frobenius G with kernel K]`, `[Frobenius G with complement H]`, and `[Frobenius G]` (exists H making G a Frobenius group).

5. **Normed TI-Subgroups (`normedTI`)**
   - A subgroup `A` is a normed TI-subgroup of `G` with normalizer `L` if `A` and its conjugates have trivial intersection and `L` is the normalizer of `A` in `G`. This is central to defining complements in Frobenius groups.

6. **Regularity Conditions on Actions**
   - `semiregular K H`: No nontrivial element of `H` commutes with a nontrivial element of `K` (i.e., action is semiregular).
   - `semiprime K H`: If an element of `K` centralizes any nontrivial element in `H`, then it centralizes all of `H`.

7. **Frobenius Actions and Has-Frobenius-Action**
   - `Frobenius_action G H S to` formalizes the classical permutation group definition: G acts on S faithfully and transitively, nontrivial elements fix at most one point, H is the stabilizer subgroup of some point.
   - `has_Frobenius_action` is the existence of some set and action realizing the above.

8. **Hall Subgroups, Coprimality, and Partitioning**
   - Hall subgroups (subgroups whose order and index are coprime) and order divisibility facts are established for kernels and complements of Frobenius groups.
   - Lemmas include results about partitions of G into conjugates or cosets and divisibility properties involving group orders.

Key Notational and Coding Conventions
=====================================

- **Notation Blocks:** Special square-bracket notations provide readable, concise predicates: e.g., `[Frobenius G = K ><| H]` for the Frobenius property with explicit kernel and complement; `[Frobenius G]` for general Frobenius groups; `[Frobenius G with complement H]`, etc.
- **Subgroup Operations:** Subgroup relations like `\subset` (subset), `\proper` (proper subset), and `:!=:` (nontrivial) use standard MathComp infix notation.
- **Group Operations:** Conjugation is written as `A :^ x`, and normalizer and centralizer notation use `'N_G(A)` and `'C_G[x]`.
- **Action Restrictions:** The `{{in X, forall ...}}` construct restricts statements to elements in a subset.
- **Booleans vs. Propositions:** Effective, computable predicates are encoded as booleans. When bridging to classical, non-decidable properties, reflection is used (`reflect`).
- **Proof Sections:** The file is organized so that basic definitions are introduced first (in a “Definitions” section), with properties and lemmas following, often grouped by subject (e.g., basic properties, invariance under group homomorphisms, and divisibility theorems).
- **Argument Scoping:** Implicit arguments and scopes (`Import GroupScope`) are used to minimize notation clutter and follow MathComp best practices.
- **Parameterization:** Sections are heavily parameterized over group types and specific subgroups, maintaining generality and reusability.

Interpretation in Broader Context
=================================
This file serves as the foundational formalization of the algebraic and permutation-theoretic characterization of Frobenius groups within the MathComp/Ssreflect ecosystem. It is intended to supply definitions and core lemmas upon which more advanced results—including character-theoretic proofs or classification theorems—can be built. All mathematical concepts are encoded so as to maximize computational reflection, undecidable (classical) concepts are explicitly marked, and all representations and notations are designed for maximal clarity, consistency, and compositionality within Coq formalizations.



Here is a Coq source file from the mathcomp library:

"{source}"

I need you to help me write all the docstring.

To do it, write a json corresponding to a list of all docstring, in the format:

[{{"fullname": "Definition trunc x := if 0 <= x then sval (trunc_subproof x) else 0%N.", "docstring": "The function trunc returns the greatest natural number less than or equal to x when x is at least zero by using the constructive truncation proof; otherwise it returns zero."}}, ....

More precisely, I want you do it for the following:

{missing}

Here are the guidelines to write the docstrings:

Follow these rules when writing “docstring”:

1.  **Natural language only.**  Do not use any mathematical symbols (like <, ≤, =, etc.).  
2.  **Complete sentences.**  Write at least one full sentence; use clear subject-verb-object structure.  
3.  **Explicit**.  Spell out operations and relationships in plain English (e.g. “less than” instead of “<”).  
4.  **Self-contained.**  Anyone reading just the docstring should understand what the lemma does without needing to see Coq syntax or names.  
5.  **Embedding-friendly.**  Avoid pronouns or references that need extra context (e.g. “this” or “it”); mention the inputs and outputs by name or role.  
6.  **Don't cite the name of the premise in the docstring**.

Here is some examples of good docstrings:

"A lemma stating that in a finite field F, the number of invertible elements equals the total number of elements in F minus one, since exactly the zero element is not invertible."
"A notation introducing {{unit R}} to denote the group of invertible elements of a ring R, enabling implicit conversion between units and ring elements as a subtype."
"A lemma stating that multiplication operation on the ring of integers modulo p is commutative."
"A notation denoting the type of integers modulo the maximum of p and two."
"A factory record asserting that a subset of a unital algebra contains zero and one, is closed under subtraction, multiplication, taking inverses of units, and scalar multiplication, thus forming a division-closed subalgebra."

Your final json must be contains in a json code block.
