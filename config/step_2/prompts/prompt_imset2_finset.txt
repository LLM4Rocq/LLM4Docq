Here is a some context to understand the following Coq source file from the mathcomp library:


Product of sets and pair imset constructions

Overview
========
This Coq source file establishes foundational operations and conventions related to set-theoretic constructions, specifically focusing on the indexed image (imset) of functions acting on pairs of elements from two sets. It builds upon the general and finitary setoid infrastructure provided by the Mathematical Components (MathComp) library and brings into scope the imset machinery that underlies much of combinatorial mathematics and algebraic formalization in the MathComp ecosystem.

Mathematical objects and representations
========================================
The principal mathematical objects managed in this file are:

• Sets over a type `T`: Sets are represented as predicates of type `pred T`, in line with the MathComp convention. That is, a set is realized as a function returning `true` for members and `false` otherwise rather than as a concrete list or sequence.

• Set images (imset): The imset of a function `f` over a set `A` is denoted as `f @: A` and represents the set of `f x` as `x` ranges over `A`. This concept is generalized to functions of multiple arguments.

• Binary imset (imset2): For two sets `A` and `B` over types `T` and `S` respectively, and a binary function `f : T -> S -> R`, the notation `f @: (A, B)` denotes the set `{{ f a b | a in A, b in B }}`, i.e., all pairs formed by applying `f` to every element from `A` and every element from `B`.

• Cartesian products: The binary imset can be used to realize the Cartesian product of sets, particularly through the pairing function `(fun x y => (x, y))`. Thus, `imset2_pair` formalizes the standard product set construction, collecting all ordered pairs from two sets into a set of tuples.

• Types and universe polymorphism: The operations here are universe-polymorphic and work for arbitrary (potentially finite or infinite) types.

Key coding and notational conventions
=====================================
• Implicit Arguments: Coq's implicit argument functionality is enabled (`Set Implicit Arguments.`) to allow functions and lemmas to be used succinctly without spelling out all types. This reduces verbosity when constructing or reasoning about images and products.

• Predicate notation: Sets are predominantly managed via predicates, using MathComp’s conventions (e.g., `pred T` for subsets of a type `T`). Notational abbreviations such as `{{x | P x}}` for set comprehensions and `A :&: B` for intersection may be leveraged downstream.

• Imset notation: The MathComp conventions of `@:` for imsets (image sets), and `imset2` for binary image set constructions are followed. The specific construction checked in this file—`imset2_pair`—realizes `{{ (a, b) | a in A, b in B }}`, the standard product set.

• Defensive printing and strictness: Strict implicit status and defensive printing are unset, promoting clarity and flexibility when working in an interactive proof session.

Context for retrieval and further documentation
===============================================
This file’s purpose is to make explicit and test the construction of the Cartesian product of sets through the generalized imset machinery, serving as groundwork for more advanced manipulations of images, products, and related combinatorial or algebraic structures. All subsequent references to set construction by pairing two families should be interpreted as using the `imset2` (or `imset2_pair` for ordered pairs) idiom. The file is minimal but serves as crucial documentation of how set-theoretic pairing and product constructions are mechanized in the MathComp formalization style.

An informed reader may thus interpret any code chunk dealing with paired elements from two sets as an application or corollary of the `imset2_pair` lemma or idiom, where the product set is represented as an indexed imset of the pairing function, in the Boolean predicate style of MathComp.

This docstring is intended to guide readers and documentation generators in situating and commenting on the use of set products and imset constructions, even if only this summary is available.



Here is a Coq source file from the mathcomp library:

"{source}"

I need you to help me write all the docstring.

To do it, write a json corresponding to a list of all docstring, in the format:

[{{"fullname": "Definition trunc x := if 0 <= x then sval (trunc_subproof x) else 0%N.", "docstring": "The function trunc returns the greatest natural number less than or equal to x when x is at least zero by using the constructive truncation proof; otherwise it returns zero."}}, ....

More precisely, I want you do it for the following:

{missing}

Here are the guidelines to write the docstrings:

Follow these rules when writing “docstring”:

1.  **Natural language only.**  Do not use any mathematical symbols (like <, ≤, =, etc.).  
2.  **Complete sentences.**  Write at least one full sentence; use clear subject-verb-object structure.  
3.  **Explicit**.  Spell out operations and relationships in plain English (e.g. “less than” instead of “<”).  
4.  **Self-contained.**  Anyone reading just the docstring should understand what the lemma does without needing to see Coq syntax or names.  
5.  **Embedding-friendly.**  Avoid pronouns or references that need extra context (e.g. “this” or “it”); mention the inputs and outputs by name or role.  
6.  **Don't cite the name of the premise in the docstring**.

Here is some examples of good docstrings:

"A lemma stating that in a finite field F, the number of invertible elements equals the total number of elements in F minus one, since exactly the zero element is not invertible."
"A notation introducing {{unit R}} to denote the group of invertible elements of a ring R, enabling implicit conversion between units and ring elements as a subtype."
"A lemma stating that multiplication operation on the ring of integers modulo p is commutative."
"A notation denoting the type of integers modulo the maximum of p and two."
"A factory record asserting that a subset of a unital algebra contains zero and one, is closed under subtraction, multiplication, taking inverses of units, and scalar multiplication, thus forming a division-closed subalgebra."

Your final json must be contains in a json code block.
