Here is a some context to understand the following Coq source file from the mathcomp library:


Mathematical Components: Algebraic and Numeric Foundations

Overview and Purpose
====================
This file serves as a central aggregation point for a wide spectrum of foundational algebraic and numerical structures and theorems in the Mathematical Components (MathComp) library, aimed at providing formal infrastructure for reasoning about rings, fields, polynomials, matrices, vector spaces, and related algebraic constructs within the Coq proof assistant. Its primary objective is to consolidate the core building blocks needed for formalizing and automating proofs in abstract and linear algebra, as well as associated number-theoretic results. By exporting a comprehensive suite of MathComp modules, this file makes all essential algebraic domains and their properties readily available for downstream developments, ranging from basic arithmetic manipulation to advanced spectral theory.

Mathematical Objects and Structures
===================================
The file encompasses many of the central mathematical abstractions used in formalizations of algebra and linear algebra:

1. **Rings and Fields**
   - *Basic Rings (`ssralg`)*: Introduces general ring and algebraic structures with minimalistic axiomatizations, and provides canonical instances for commutative rings, fields, and division rings.
   - *Numerical Structures (`ssrnum`)*: Adds numeric rings, ordered rings, real numbers, and related ordered algebraic objects, including the Archimedean property.
   - *Rational Numbers (`rat`)* and *Integers (`ssrint`)*: Provides formal types and operations for rationals (`rat`) and integers (`int`) with full arithmetic and divisibility theory.

2. **Polynomials**
   - *Univariate and Multivariate Polynomials (`poly`, `polydiv`, `polyXY`, `qpoly`)*: Models polynomials over arbitrary rings and fields, defines basic arithmetic (addition, multiplication, composition), polynomial division, and polynomials in several variables.
   - *Matrix Polynomials (`mxpoly`)*: Supports polynomials with matrix coefficients, essential for linear algebraic computations such as minimal and characteristic polynomials.

3. **Matrices and Linear Algebra**
   - *Finite-Dimensional Algebras (`finalg`)* and *Countable Algebras (`countalg`)*: Develops algebraic structures (including endomorphism rings) built from finite or countable types.
   - *Matrices and Matrix Algebra (`matrix`, `mxalgebra`, `mxred`)*: Provides matrices over arbitrary rings and fields, full library of matrix operations, matrix reductions (e.g., row reduction), vector spaces over rings, and sesquilinear forms.
   - *Vectors (`vector`)*: Develops the theory of finite-dimensional vector spaces, basis, and coordinates.

4. **Quotients, Fractions, and Modulo Structures**
   - *Ring Quotients (`ring_quotient`)*: Constructs quotient rings, ideals, and the corresponding arithmetic.
   - *Fractions (`fraction`)*: Provides field of fractions for integral domains, including localized computations.
   - *Modular Arithmetic and Finite Fields (`zmodp`)*: Formalizes finite fields and modular arithmetic (integers mod p).

5. **Intervals and Real Number Arithmetic**
   - *Intervals (`interval`)*: Types and reasoning tools for intervals on ordered rings and fields, supporting rigorous interval arithmetic and reasoning about bounds.
   - *Interval Inference (`interval_inference`)*: (Imported but not exported by default) Provides automation tactics for performing calculations and verifications about intervals, bounds, and inequalities.

6. **Advanced Algebraic Structures**
   - *Sesquilinear Forms (`sesquilinear`)*: Deals with bilinear and sesquilinear forms such as inner products and hermitian forms.
   - *Spectral Theory (`spectral`)*: Develops eigenvalues, eigenvectors, diagonalization and the spectral theorem for linear operators over fields and rings.

7. **Divisibility and Integer Arithmetic**
   - *Integer Division and GCD/LCM (`intdiv`)*: Supports arithmetic notions such as Euclidean division, greatest common divisors, least common multiples, Bezout’s identity, and related facts for integers.
   - *Archimedean Rings (`archimedean`)*: Adds properties of rings with the Archimedean property (every element is bounded above/below by an integer).

Key Conventions and Notation
============================
- **Modular Import/Export**: All modules are imported in such a way as to make their theorems and definitions globally available to any file that imports this one. However, to access the automation provided by `interval_inference` (for proofs involving intervals), users must explicitly `Import interval_inference`—it is not exported automatically to avoid polluting the global hint database.

- **Type Reification and Canonical Structures**: Core algebraic objects (rings, fields, modules, vector spaces) are represented as types with canonical instances and structure records. This enables automatic inference of operations and properties (e.g., `+`, `*`, zero, one, inverses, scalars) via the Coq typeclass and canonical structure mechanisms, minimizing explicit parameter passing.

- **Scopes and Notation**: Distinct naming scopes (such as `ring_scope`, `poly_scope`, `matrix_scope`) are used throughout to disambiguate overloaded operations and infix notations for algebraic objects, e.g., polynomial addition/multiplication, matrix multiplication, and scalar product.

- **Reflection and Boolean Predicates**: Predicates such as equality, divisibility, or congruence are frequently encoded as boolean-valued functions (e.g., `a %| b` for divisibility), with reflection lemmas that connect the boolean and propositional viewpoints. This enables the use of Coq tactics for both computation and proof.

- **Finite Types and Enumerability**: Many algebraic constructions rely on finite or countable types for bases, indexing, and structural induction, using typeclass machinery to manage these constraints and allow automation.

- **Matrix and Polynomial Operations**: Abstract algebraic facts (e.g., spectral theorems, normal forms) are encoded through concrete representations of matrices, polynomials, and endomorphisms, with attention to both constructive algorithms and classical results.

- **Automation, Rewriting, and Tactics**: While most results are accessed through functional programming constructs or rewriting rules, specific topics (such as interval reasoning) are supported by custom tactics (found in the imported but not exported `interval_inference` module).

Contextual Guidance for Users
============================
When encountering code, lemmas, or definitions in files that import this module, readers can assume the availability of the full range of structures and facts outlined above. Notations and operations refer to MathComp conventions, with fully formalized algebraic objects as native Coq types, equipped with decidable equality, reflection, and rich automation where possible. Proof automation and notation are designed to balance mathematical readability with rigor and computational tractability.

In summary, this file plays the role of a mathematical "prelude" or foundational context: it establishes the default vocabulary, semantics, and technical apparatus necessary for formal research and development in abstract algebra, number theory, and linear algebra within the Coq system.



Here is a Coq source file from the mathcomp library:

"{source}"

I need you to help me write all the docstring.

To do it, write a json corresponding to a list of all docstring, in the format:

[{{"fullname": "Definition trunc x := if 0 <= x then sval (trunc_subproof x) else 0%N.", "docstring": "The function trunc returns the greatest natural number less than or equal to x when x is at least zero by using the constructive truncation proof; otherwise it returns zero."}}, ....

More precisely, I want you do it for the following:

{missing}

Here are the guidelines to write the docstrings:

Follow these rules when writing “docstring”:

1.  **Natural language only.**  Do not use any mathematical symbols (like <, ≤, =, etc.).  
2.  **Complete sentences.**  Write at least one full sentence; use clear subject-verb-object structure.  
3.  **Explicit**.  Spell out operations and relationships in plain English (e.g. “less than” instead of “<”).  
4.  **Self-contained.**  Anyone reading just the docstring should understand what the lemma does without needing to see Coq syntax or names.  
5.  **Embedding-friendly.**  Avoid pronouns or references that need extra context (e.g. “this” or “it”); mention the inputs and outputs by name or role.  
6.  **Don't cite the name of the premise in the docstring**.

Here is some examples of good docstrings:

"A lemma stating that in a finite field F, the number of invertible elements equals the total number of elements in F minus one, since exactly the zero element is not invertible."
"A notation introducing {{unit R}} to denote the group of invertible elements of a ring R, enabling implicit conversion between units and ring elements as a subtype."
"A lemma stating that multiplication operation on the ring of integers modulo p is commutative."
"A notation denoting the type of integers modulo the maximum of p and two."
"A factory record asserting that a subset of a unital algebra contains zero and one, is closed under subtraction, multiplication, taking inverses of units, and scalar multiplication, thus forming a division-closed subalgebra."

Your final json must be contains in a json code block.
