Here is a some context to understand the following Coq source file from the mathcomp library:


Algebraic Foundations and Character Theory: Module Index

Overview
========
This file serves as a foundational aggregation point for the formal development of abstract algebra and finite group theory in Coq, utilizing the Mathematical Components (MathComp) library. Its primary purpose is to establish a comprehensive algebraic environment by importing all essential MathComp modules related to ordered structures, finite groups, rings and algebras, field theory, and character theory. Through a series of `Require Export` statements, the file ensures that users working within this module have immediate access to key structures, notations, and results from diverse areas of mathematics, thereby enabling the formal verification and mechanization of complex algebraic arguments, particularly those involving finite groups and their representations.

Mathematical Scope and Structures
=================================
The modules imported by this file collectively provide formalizations of the following core mathematical objects and concepts:

- **Basic Logic and Structures**: The basic building blocks of set theory, booleans, tuples, functions, and finite types are furnished (`all_boot`), supporting generic formal reasoning and data manipulation.

- **Ordered Algebraic Structures**: Notions of relations, posets, and ordered sets are established (`all_order`), introducing concepts like order relations, lattices, and their properties.

- **Finite Group Theory**: The syntax and semantics for finite groups, subgroups, cosets, group actions, and the arithmetic of group elements are defined (`all_fingroup`). This includes support for permutations, orbits, stabilizers, and Sylow subgroups.

- **Algebraic Structures (Rings, Algebras, Modules)**: The file brings in all major algebraic structures—rings, modules, algebras, and their morphisms (`all_algebra`)—as well as infrastructure for finite-dimensional algebra and basic module theory.

- **Solvable Groups**: Theory and tools for solvable and nilpotent groups are included (`all_solvable`), formalizing key structural results and supporting the classification of group properties.

- **Field Theory**: The formalization of fields, field extensions, and related algebraic tools (`all_field`) is imported. This enables developments involving splitting fields, algebras over fields, and computations with polynomials.

- **Character Theory**: Infrastructure for formal character theory (`all_character`) is made available. This includes character tables, representations of finite groups, orthogonality relations, and related notions crucial for the study of group representations and modular representation theory.

Representational Conventions in Coq
===================================
- **Types and Structures**: Each mathematical concept is encoded as a concrete Coq type or record (e.g., `finGroupType` for groups, `zmodType` for modules, `fieldType` for fields, `algType` for algebras, `gcharType` for characters).

- **Canonical Structures**: The MathComp library leverages Coq's canonical structures mechanism to support implicit type inference and allow for smooth composition of algebraic hierarchies (e.g., every field is a ring, every group is a monoid, etc.).

- **Predicate and Set Notation**: Most mathematical properties (e.g., subgroup membership, normality, solvability) are represented as boolean-valued predicates, facilitating both decidable reasoning and proof automation. Set-theoretic notions often use the `{{set T}}` type for sets over some carrier type `T`.

Key Coding and Notational Conventions
=====================================
- **Module Inclusion by Export**: The use of `From ... Require Export ...` recursively includes all definitions, lemmas, and notations from the constituent MathComp modules, ensuring that any file importing this one will gain access to the full algebraic and group-theoretic infrastructure.

- **Unified Notation and Scope Management**: All algebraic operations (group multiplication, ring addition, scalar multiplication, etc.) are available via MathComp’s uniform notations and are organized under common scopes (`%g` for groups, `%R` for rings, etc.), minimizing ambiguity and supporting concise, algebra-like Coq expressions.

- **Hierarchy Design**: The file contributes to a highly modular and hierarchical design pattern, where most structures are layered to support both generic and specialized reasoning. For example, a theorem about general rings can be used in the context of matrix rings, polynomial rings, or fields without modification.

- **Proof Automation and Boolean Reflection**: Boolean predicates and reflection lemmas (linking propositional and boolean forms) are standard throughout, making it easier to automate proofs, perform case analyses, and rewrite goals in both constructive and classical styles.

Purpose and Usage
=================
This file acts as a master interface or "prelude" for developments that require broad algebraic and group-theoretic foundations, especially those concerning the representation theory of finite groups. By importing all major MathComp modules relevant to (ordered) algebra, finite group theory, and character theory, it allows future files to immediately access all necessary data types, operations, results, and notations without repeatedly specifying the underlying imports.

Users intending to develop, verify, or read proofs concerning abstract algebraic systems, group actions, or representation and character theory can use this module as a starting point for their work. The conventions and infrastructure provided ensure uniformity, interoperability, and ease of mechanization throughout formal developments in these domains.



Here is a Coq source file from the mathcomp library:

"{source}"

I need you to help me write all the docstring.

To do it, write a json corresponding to a list of all docstring, in the format:

[{{"fullname": "Definition trunc x := if 0 <= x then sval (trunc_subproof x) else 0%N.", "docstring": "The function trunc returns the greatest natural number less than or equal to x when x is at least zero by using the constructive truncation proof; otherwise it returns zero."}}, ....

More precisely, I want you do it for the following:

{missing}

Here are the guidelines to write the docstrings:

Follow these rules when writing “docstring”:

1.  **Natural language only.**  Do not use any mathematical symbols (like <, ≤, =, etc.).  
2.  **Complete sentences.**  Write at least one full sentence; use clear subject-verb-object structure.  
3.  **Explicit**.  Spell out operations and relationships in plain English (e.g. “less than” instead of “<”).  
4.  **Self-contained.**  Anyone reading just the docstring should understand what the lemma does without needing to see Coq syntax or names.  
5.  **Embedding-friendly.**  Avoid pronouns or references that need extra context (e.g. “this” or “it”); mention the inputs and outputs by name or role.  
6.  **Don't cite the name of the premise in the docstring**.

Here is some examples of good docstrings:

"A lemma stating that in a finite field F, the number of invertible elements equals the total number of elements in F minus one, since exactly the zero element is not invertible."
"A notation introducing {{unit R}} to denote the group of invertible elements of a ring R, enabling implicit conversion between units and ring elements as a subtype."
"A lemma stating that multiplication operation on the ring of integers modulo p is commutative."
"A notation denoting the type of integers modulo the maximum of p and two."
"A factory record asserting that a subset of a unital algebra contains zero and one, is closed under subtraction, multiplication, taking inverses of units, and scalar multiplication, thus forming a division-closed subalgebra."

Your final json must be contains in a json code block.
