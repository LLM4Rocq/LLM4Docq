Here is a some context to understand the following Coq source file from the mathcomp library:


Character Theory Fundamentals

Purpose and Goal
================
This file serves as a foundational entry point for the formalization and manipulation of character theory within finite group representation in the Coq proof assistant, utilizing the Mathematical Components (MathComp) library. Its primary objective is to assemble and export a cohesive suite of modules that collectively enable the formal study of group characters, class functions, group actions on characters, integral and virtual characters, group representation matrices, and associated algebraic properties fundamental to finite group theory.

Through these exports, the file allows downstream developments to access a rich hierarchy of mathematical objects and abstractions pertinent to character theory, while maintaining a consistent framework for reasoning about group representations, character tables, and module-theoretic phenomena.

Mathematical Objects and Representations
=======================================

1. **Finite Groups and Group Actions**
   - Finite groups are represented as types with canonical group structures, as provided by MathComp's finite group formalization. Elements of groups are manipulated as typed values, ensuring type safety and encapsulation of group operations (identity, multiplication, inversion).
   - Group actions (e.g., conjugation, left/right action) are formalized as functions acting on sets, elements, or functions defined over the group.

2. **Group Representations**
   - A group representation is modeled as a group homomorphism from a finite group G into the general linear group of invertible matrices of a fixed dimension over a field, frequently the complex numbers or a splitting field adequate for the group's order.
   - Within Coq, representations are typically encoded as functions or records associating each group element with its image matrix. Matrix types are provided by MathComp's linear algebra libraries.

3. **Matrices and Algebraic Structures**
   - Matrices of fixed dimension and entries in a base ring or field are represented as multidimensional arrays or functions over finite index types.
   - Matrix algebraic operations—addition, multiplication, inversion, trace—are provided in a way compatible with typeclass-based algebraic hierarchies, ensuring interoperability between basic algebraic types and higher-level structures like representations.

4. **Class Functions and Characters**
   - Class functions, or functions constant on conjugacy classes, are formalized as functions from the group (or its elements) to the complex numbers (or another coefficient field), equipped with predicates or subtypes enforcing the class invariance property.
   - Characters of a representation are defined as special class functions given by taking the trace (sum of diagonal entries) of the image matrix under the representation, for each group element.
   - Both irreducible and general (possibly reducible, virtual) characters are present, with irreducibility specified by established predicates.

5. **Virtual and Integral Characters**
   - Virtual characters extend the notion of characters to include formal integer linear combinations of irreducible characters, enabling induction arguments and the study of representation rings.
   - Integral characters are those that take integer values on all group elements, and are tracked via explicit predicates or subtypes to facilitate constructive arguments about integrality in character tables.

6. **Inertia and Induction**
   - The notion of inertia groups and related concepts (such as stabilizers in character actions) are formalized to support induction and restriction of characters between subgroups, a key tool in character-theoretic arguments.

Key Conventions and Coding Patterns
===================================

- **Modular Structure and Namespace Management**
  - The file exclusively uses `From ... Require Export` commands to import and re-export several MathComp modules providing the above abstractions. This approach centralizes common character-theoretic tools and notations, allowing client files to depend on a single import for most needs in character theory.

- **Canonical Structures and Typeclasses**
  - MathComp's canonical structures are leveraged extensively, enabling seamless inference of algebraic properties, coercion between related types (e.g., classes and functions), and overloading of notations. This helps automate algebraic reasoning, such as inferencing when working with representations or class functions.

- **Notational Conventions**
  - Mathematical notations closely match their mathematical counterparts wherever possible:
      - Representations, characters, and their spaces often have types or names mirroring standard mathematical language.
      - The trace (`tr`) and character functions (`chi`) use familiar notation, and class invariance is typically denoted by predicates like `class_fun`.
      - Subscript and superscript notations reflect group actions (e.g., restriction, induction) and are realized via index notations or named operators.

- **Type Safety and Coercions**
  - Mathematical substructures (like irreducible characters, integral characters, or class functions) are introduced as subtypes or equipped with predicates, ensuring that properties are enforced by the type system.
  - Where possible, coercions are provided to allow seamless use of these substructures as ordinary functions or objects, subject to their respective invariants.

- **Vocabulary Consistency**
  - Key mathematical terms such as "character," "representation," "class function," "matrix," and "inertia" bear the same meaning as in traditional algebra and character theory texts.

Context for Retrieval and Interpretation
========================================
This file functions as a central hub for fundamental objects and results of finite group character theory in MathComp and related Coq libraries. Any subsequent derivation, lemma, or code chunk relying on this file is expected to manipulate:
  - Finite groups and their representations as structured types and morphisms,
  - Matrix-valued data representing the group action,
  - Class functions and their invariants (particularly characters and their properties),
  - The algebraic structures (rings, modules) formed by class functions and characters,
  - Methods for transferring characters between groups via restriction, induction, and the study of group actions.

When reviewing or producing comments for specific definitions and proofs in this file or those building upon it, one should assume that characters, class functions, and representations are always properly typed and subject to the canonical algebraic structures provided by MathComp and the exported modules. The standard mathematical conventions of group and character theory prevail, mediated by Coq's dependently typed functional language and the hierarchical organization of algebraic concepts in MathComp.



Here is a Coq source file from the mathcomp library:

"{source}"

I need you to help me write all the docstring.

To do it, write a json corresponding to a list of all docstring, in the format:

[{{"fullname": "Definition trunc x := if 0 <= x then sval (trunc_subproof x) else 0%N.", "docstring": "The function trunc returns the greatest natural number less than or equal to x when x is at least zero by using the constructive truncation proof; otherwise it returns zero."}}, ....

More precisely, I want you do it for the following:

{missing}

Here are the guidelines to write the docstrings:

Follow these rules when writing “docstring”:

1.  **Natural language only.**  Do not use any mathematical symbols (like <, ≤, =, etc.).  
2.  **Complete sentences.**  Write at least one full sentence; use clear subject-verb-object structure.  
3.  **Explicit**.  Spell out operations and relationships in plain English (e.g. “less than” instead of “<”).  
4.  **Self-contained.**  Anyone reading just the docstring should understand what the lemma does without needing to see Coq syntax or names.  
5.  **Embedding-friendly.**  Avoid pronouns or references that need extra context (e.g. “this” or “it”); mention the inputs and outputs by name or role.  
6.  **Don't cite the name of the premise in the docstring**.

Here is some examples of good docstrings:

"A lemma stating that in a finite field F, the number of invertible elements equals the total number of elements in F minus one, since exactly the zero element is not invertible."
"A notation introducing {{unit R}} to denote the group of invertible elements of a ring R, enabling implicit conversion between units and ring elements as a subtype."
"A lemma stating that multiplication operation on the ring of integers modulo p is commutative."
"A notation denoting the type of integers modulo the maximum of p and two."
"A factory record asserting that a subset of a unital algebra contains zero and one, is closed under subtraction, multiplication, taking inverses of units, and scalar multiplication, thus forming a division-closed subalgebra."

Your final json must be contains in a json code block.
