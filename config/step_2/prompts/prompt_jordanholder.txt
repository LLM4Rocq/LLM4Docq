Here is a some context to understand the following Coq source file from the mathcomp library:


Jordan-Hölder Theorem Formalization for Finite Groups

Overview
========
This file develops a comprehensive formalization of the classical Jordan-Hölder theorem for finite groups within the Coq proof assistant. Specifically, it rigorously defines and proves results concerning the structure and uniqueness of composition series for finite groups, and also extends these results to the setting of composition series that are invariant under an external group action. These formalizations lay the groundwork for further developments in group theory inside the MathComp ecosystem, with precise handling of quotient structures, isomorphism classes of factors, and subtle interactions between group actions and series decompositions.

Purpose and Goal
================
The file’s main goal is to formalize and prove the uniqueness—up to permutation and isomorphism—of the factor sequences associated with any two composition series of a finite group. This is the essence of the Jordan-Hölder theorem. The development also generalizes this result to the case in which the composition series are required to be stable (invariant) under the action of an external group. The file introduces a careful representation for “sections” (pseudo-quotients of subgroups) to facilitate reasoning about factors and their isomorphism types, making the formalization tractable and modular.

Mathematical Objects and Representations
========================================
The main mathematical structures, types, and concepts manipulated in this file, and their Coq representations, include:

1. **Finite Groups and Subgroups**
   - Finite groups are represented by the type `finGroupType`.
   - Subgroups of a finite group `G` (of type `finGroupType`) are denoted `{{group G}}` as per MathComp conventions.

2. **Sections (Pseudo-Quotients)**
   - A *section* represents a quotient of one subgroup by another (where the second is a subgroup of the first).
   - In Coq, this is given as an inductive type `section (gT : finGroupType)`, storing a pair `(G1, G2)` of subgroups, with the intuition of the quotient `G1 / G2`.
   - Sections are manipulated using the notation `(G1 / G2)%sec`, and relevant coercions provide access to both the underlying pair and the quotient group structure.

3. **Isomorphism Classes and Canonical Representatives**
   - Since multiple quotient groups can be isomorphic, the type supports reasoning about sections *up to isomorphism*. The predicate `section_isog` expresses that two sections are isomorphic.
   - The function `section_repr` selects a canonical representative of the isomorphism class of a section, and `mksrepr G1 G2` abbreviates `section_repr (G1 / G2)%sec`. This ensures that factor lists associated with composition series use canonical representatives.

4. **Composition Series**
   - A *composition series* for a group `G` is modeled as a strictly decreasing sequence of subgroups ending with the trivial group, where successive quotients are simple.
   - The `comps G s` predicate states that `s` is a composition series for `G`, built from a chain of subgroups with maximal normal inclusions, terminating at the identity.

5. **Associated Factors**
   - To any composition series (modeled as a sequence of subgroups), the development associates a list of canonical section representatives, using the `mkfactors G s` function. This provides a list of the isomorphism types of the composition factors.

6. **Group Actions and Invariant Series**
   - The formalism is widened to handle *external group actions*: Given groups `A`, `D`, and an action `to : groupAction A D` (where `A` acts on `D`), the concepts of maximal normal subgroups, simplicity, and composition series are adapted to require invariance under `A`.
   - The predicate `maxainv to B C` asserts that `C` is a maximal proper normal subgroup of `B` which is additionally invariant under `A`’s action via `to`.
   - `asimple to B` captures that `B` has no nontrivial proper normal `A`-invariant subgroups.
   - `acomps to G s` asserts that `s` is a composition series for `G` with each inclusion maximally `A`-invariant, again terminating with the identity.

7. **Uniqueness Statements**
   - The core theorems state that the multiset of sections associated to any two composition series for the same group (or for the same group under a given action) are equal up to permutation and isomorphism:
       - `JordanHolderUniqueness`: The factors from any two composition series for a group are permutation-isomorphic.
       - `StrongJordanHolderUniqueness`: The same result for composition series stable under a group action.

Key Conventions and Notation
============================
- **Section Notation and Scope**
  - The notation `(G1 / G2)%sec` is used to denote the section (pseudo-quotient) of `G1` by `G2`, with binding to the custom scope `section_scope`.
  - Notations and coercions allow sections to be treated as both pairs of subgroups and as coset quotient groups transparently.

- **Canonical Factor Representatives**
  - Throughout, isomorphism classes of factors are always handled via canonical representatives (`section_repr`), so that lists of factors can be compared modulo isomorphism.
  - Operations such as `mkfactors` automatically convert raw sections to their canonical images.

- **Refinement of Series Definitions**
  - Standard MathComp series predicates (e.g., `.-series`) are instantiated to require maximal normality (for composition series) and maximal invariance (when actions are present).
  - Series are always sequences of subgroups listed in decreasing order, with the last element being the trivial group.

- **Explicit Handling of Group Actions**
  - When operating in the context of group actions, subgroups are always considered relative to their invariance under the specified action, and auxiliary predicates about normality and actions are provided to support proofs.

- **Boolean-Reflective Lemmas**
  - Many predicates are proved with `reflect` statements, allowing easy transfer between boolean and propositional reasoning in the Ssreflect style.

- **Implicit Arguments and Scopes**
  - The file heavily uses Coq’s implicit arguments and scope management to reduce notational clutter and to allow notations to be overloaded appropriately (e.g., group operations, coset operations, action morphisms).

Context for Retrieval and Understanding
=======================================
With this docstring, a reader is equipped to interpret any code chunk from the file by tracing:

- How sections encode quotient-type objects between pairs of subgroups.
- How composition series and their factors are represented and manipulated as sequences and lists in Coq.
- How isomorphism classes are enforced using canonicalization.
- The role and handling of external group actions in refining all structural definitions.
- The main theorems as establishing unique decomposition for finite groups (and for group actions) up to defined equivalence of “factor lists”.

In summary, this file encapsulates a complete foundational development of composition series, the Jordan-Hölder theorem, and their group action-stable analogs, using explicit, type-safe representations and operations on finite groups, subgroups, quotient (section) structures, canonical representatives, and invariance under group actions—all in a manner conformant with the MathComp formalization style but explained here for orientation without prior exposure to that library.



Here is a Coq source file from the mathcomp library:

"{source}"

I need you to help me write all the docstring.

To do it, write a json corresponding to a list of all docstring, in the format:

[{{"fullname": "Definition trunc x := if 0 <= x then sval (trunc_subproof x) else 0%N.", "docstring": "The function trunc returns the greatest natural number less than or equal to x when x is at least zero by using the constructive truncation proof; otherwise it returns zero."}}, ....

More precisely, I want you do it for the following:

{missing}

Here are the guidelines to write the docstrings:

Follow these rules when writing “docstring”:

1.  **Natural language only.**  Do not use any mathematical symbols (like <, ≤, =, etc.).  
2.  **Complete sentences.**  Write at least one full sentence; use clear subject-verb-object structure.  
3.  **Explicit**.  Spell out operations and relationships in plain English (e.g. “less than” instead of “<”).  
4.  **Self-contained.**  Anyone reading just the docstring should understand what the lemma does without needing to see Coq syntax or names.  
5.  **Embedding-friendly.**  Avoid pronouns or references that need extra context (e.g. “this” or “it”); mention the inputs and outputs by name or role.  
6.  **Don't cite the name of the premise in the docstring**.

Here is some examples of good docstrings:

"A lemma stating that in a finite field F, the number of invertible elements equals the total number of elements in F minus one, since exactly the zero element is not invertible."
"A notation introducing {{unit R}} to denote the group of invertible elements of a ring R, enabling implicit conversion between units and ring elements as a subtype."
"A lemma stating that multiplication operation on the ring of integers modulo p is commutative."
"A notation denoting the type of integers modulo the maximum of p and two."
"A factory record asserting that a subset of a unital algebra contains zero and one, is closed under subtraction, multiplication, taking inverses of units, and scalar multiplication, thus forming a division-closed subalgebra."

Your final json must be contains in a json code block.
