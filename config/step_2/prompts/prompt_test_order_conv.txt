Here is a some context to understand the following Coq source file from the mathcomp library:


Order Duality and Product Structures: Algebraic Equivalences in the MathComp Order Hierarchy

Overview and Purpose
====================
This Coq module systematically establishes and documents the key isomorphism properties of the *order dual* operator and its interplay with the product operation on types, within the context of the Mathematical Components (MathComp) order theory library. Its primary goals are twofold:

1. **Dual of the Dual**: To show, for a wide range of order-theoretic structures, that taking the dual twice yields an order structure canonically equivalent to the original. In particular, the `on` carrier predicates of original and double-dual order structures coincide definitionally.

2. **Dual of a Product**: To formalize that the dual of a product order coincides with the product of the dual orders, again for all relevant structures. That is, `(T1 * T2)^d` is (up to definitional equality) the same as `(T1^d * T2^d)` for each considered type of order structure.

These results are formulated for all structural layers in the MathComp order hierarchy, including preorders, partial orders, semilattices, lattices, distributive lattices, orders (total orders), and their many bounded, topological, and finite variants.

The file serves both as a comprehensive formal “catalog” of these definitional equivalences, and as a base for further automation and reasoning about dualities and products in order theory formalized in Coq.

Mathematical Objects and Representations
=======================================
The mathematical objects and structures considered in the file are:

- **Order-theoretic Structures**: These include *preorders*, *partial orders*, *meet/join semilattices*, *lattices*, *distributive lattices*, and *orders* (total orders), together with various “flavors”:
    - **Bounded** (prefixed with `b` or `B`), indicating the existence of least/greatest elements.
    - **Topological** (prefixed with `t` or `T`), carrying an associated topology or closure operator.
    - **Finite** (prefixed with `fin`/`Fin`), denoting types with finitely many elements.
    - **Combinations** (e.g., `tb` for topological and bounded; `ctb` for compact, topological, and bounded).
  These structures are represented in MathComp as dependent records carrying operations (like order relations, meet/join operators, bounds, etc.) and packaged so as to support type inference and canonical structure resolution.

- **Carriers and Type Parameters**: All structures are parameterized by a display type `disp` (of type `Order.disp_t`), which threads information about how order structures are implemented or displayed.

- **Order Dual Operator (`^d`)**: For any type endowed with an order structure, the dual is the same set with the order relation reversed. In MathComp, the operation `T^d` denotes the dual structure of `T`.

- **Product of Ordered Types (`*`)**: The pair type `T1 * T2` is equipped with the product order (componentwise ordering). The module formalizes how the duality operation interacts with products.

- **Carrier Predicates (`.on`)**: Within the MathComp library, each concrete order structure is associated with a "carrier predicate" of the form `Order.X.on T`, exposing the underlying order, meet/join, etc., as Coq predicates or operations for the structure `T`.

Key Results and Lemmatic Equivalences
=====================================
Every structure listed above is accompanied by a lemma expressing either:

- That the underlying carrier of the double dual coincides definitionally with that of the original (`Order.X.on T = Order.X.on T^d^d`);
- Or, when applied to products, that the carrier of the dual of a product is equal to the product of the duals (`Order.X.on (T1 * T2)^d = Order.X.on (T1^d * T2^d)`).

In both cases, these equalities are expressed and established by the definitional equation reflexivity (`erefl`), relying on the actual definitions being syntactically identical.

Coding and Notational Conventions
=================================
- **Notation and Suffixes**: Type names are heavily suffixed to indicate which properties are built in:
    - `preorderType`, `porderType` for (pre)orders.
    - `meetSemilatticeType`, `joinSemilatticeType`, `latticeType`, `distrLatticeType` for semilattices, lattices, and distributive lattices.
    - Prefixes and letter codes `b`, `t`, `tb`, `c`, `cb`, `ct`, `ctb`, `fin`, `Fin` indicate boundedness, topology, compactness, and/or finiteness, both as type constructors and in the `Order.X.on` carrier predicates.
- **Order Dual Notation**: The dual of a type `T` is written as `T^d`. The dual of a product `(T1 * T2)` is written as `(T1 * T2)^d`.
- **Carrier Predicate Notation**: For each structure, e.g., `latticeType`, the logical carrier is accessed as `Order.Lattice.on T`.
- **Equivalences**: All statements are equations between instances of these `on` predicates, proven stationarily (`= erefl`).
- **Sectioning**: The file is divided into logical Coq sections:
    - `dual_of_dual` for (T^d)^d results.
    - `dual_of_prod` for dual-of-product and product-of-duals results.
- **Display Parameters**: Each section is parameterized by appropriate display parameters `disp`, as required by MathComp order classes.

Context for Interpretation
=========================
The file is not about proving nontrivial properties of orders; rather, it audits and records the core definitional equalities and isomorphism patterns that result from the MathComp encoding of order duality and product operations at all abstraction levels of the order hierarchy. Statements in the file are essentially type-theoretic equalities (`= erefl`), leaning on MathComp’s uniform type-class approach and canonical structure mechanisms.

Any function or lemma in the file of the form `eq_dual_dual_XType` or `eq_dual_prod_XType` witnesses that within MathComp's design, the application of duals or duals of products is definitionally idempotent or commutative as prescribed by algebraic order theory. These facts are key for downstream developments that rely on duality principles or need to reason equationally about dual, product, and finite order structures.

In summary, this file both documents and provides machine-checked assurance of these definitional equivalences, thus serving as a trusted backbone for further duality-based formalization and automation in MathComp’s order theory ecosystem.



Here is a Coq source file from the mathcomp library:

"{source}"

I need you to help me write all the docstring.

To do it, write a json corresponding to a list of all docstring, in the format:

[{{"fullname": "Definition trunc x := if 0 <= x then sval (trunc_subproof x) else 0%N.", "docstring": "The function trunc returns the greatest natural number less than or equal to x when x is at least zero by using the constructive truncation proof; otherwise it returns zero."}}, ....

More precisely, I want you do it for the following:

{missing}

Here are the guidelines to write the docstrings:

Follow these rules when writing “docstring”:

1.  **Natural language only.**  Do not use any mathematical symbols (like <, ≤, =, etc.).  
2.  **Complete sentences.**  Write at least one full sentence; use clear subject-verb-object structure.  
3.  **Explicit**.  Spell out operations and relationships in plain English (e.g. “less than” instead of “<”).  
4.  **Self-contained.**  Anyone reading just the docstring should understand what the lemma does without needing to see Coq syntax or names.  
5.  **Embedding-friendly.**  Avoid pronouns or references that need extra context (e.g. “this” or “it”); mention the inputs and outputs by name or role.  
6.  **Don't cite the name of the premise in the docstring**.

Here is some examples of good docstrings:

"A lemma stating that in a finite field F, the number of invertible elements equals the total number of elements in F minus one, since exactly the zero element is not invertible."
"A notation introducing {{unit R}} to denote the group of invertible elements of a ring R, enabling implicit conversion between units and ring elements as a subtype."
"A lemma stating that multiplication operation on the ring of integers modulo p is commutative."
"A notation denoting the type of integers modulo the maximum of p and two."
"A factory record asserting that a subset of a unital algebra contains zero and one, is closed under subtraction, multiplication, taking inverses of units, and scalar multiplication, thus forming a division-closed subalgebra."

Your final json must be contains in a json code block.
